{"version":3,"sources":["app.js"],"names":["_idb","require","navigator","serviceWorker","register","then","console","log","idb","open","document","addEventListener","url","body","querySelector","dbPromise","currencyConvertTo","button","originalCurrencyInputField","createNode","nodeType","currency","arguments","length","createElement","node","innerText","addCurrenciesToDOM","currencies","map","currencyConvertFrom","appendChild","nodeTypeToCreate","fetchCurrencyRate","fetch","res","json","data","inputAmount","value","getInputAmount","exchangeRate","input","convertedCurrencyInputField","convertedCurrency","toFixed","calculateExchangeRate","concat","catch","err","currency2","curr1","curr2","currencyUrl","buildAPIUrl","currency1","detectEnterPressed","getExchangeRate","e","event","keyCode","addEventListeners","fetchListOfCurrencies","caches","response","Object","keys","results","sort","cache","error"],"mappings":"aAAA,IAAAA,KAAAC,QAAA,2PAKI,kBAAmBC,WACrBA,UAAUC,cAAcC,SAAS,SAASC,KAAK,WAC7CC,QAAQC,IAAI,+BAIhB,WANA,GAAI,cAAmBL,OAaHM,MAAAA,QAAIC,KAAK,WAAY,QAZvCP,QAAUC,IAAAA,0CAKZ,GAKGO,SAAAC,iBAAA,mBAAA,WASD,IAiDAC,EAjDMC,EAAOH,SAASI,cAAc,QAP9BC,EAAYP,SAASM,cAA3B,2BAPFE,EAAAN,SAAAI,cAAA,yBAiBQG,EAASP,SAASI,cAAc,YAPxCI,EAAAR,SAAAI,cASI,yBANJJ,EAA0BA,SAAoBI,cAC5C,0BAcA,SAASK,EAAWC,EAAUC,GAH9B,GAAA,IAAAC,UAAAC,OAKI,MAAO,2EADT,IAAID,EAAAA,SAAAE,cAAwBJ,GAO5B,OANEK,EAAAC,UAAOL,EAMFI,EAMT,SAASE,EAAmBC,GAH5B,GAAA,IAAAA,EAAAL,QAAA,cAAAK,EAKI,MAAO,iDADT,IAAIA,EAAA,SAEHA,EAAAC,IAAA,SAAAR,GAKCS,EAAoBC,YAAYZ,EAAWa,EAAkBX,IAH/DL,EAAMgB,YAANb,EAAAa,EAAAX,MAyDF,SAASY,EAAkBrB,GAA3B,GAASqB,cAATrB,EACE,MAAIA,qCAIJsB,MAAMtB,EAAK,CAAXsB,MAAA,YAGG7B,KAAK,SAAA8B,GAAA,OAAAA,EAAAC,SAAA/B,KAAA,SAAAgC,GACLhC,IAAKiC,EA1DV5B,SAAAI,cAAA,gBAAAyB,MA2DYD,EAAcE,OAAAA,OAApBH,IAqDF,SAAOI,EAAAC,GACR,GAAA,IAAApB,UAAAC,OADC,MAAO,uFAKTL,IAAAA,EAAAA,EAAAuB,EAEDvB,EAAAqB,MAAAG,EADCC,EAA4BJ,MAAQK,EAAkBC,QAAQ,KAxD1DC,WAAAA,EAAAA,mBAAyBL,GAAzBM,OAAA,CAAuCT,OAExCU,MAAM,SAAAC,GAAA,OAAA3C,QACLA,MADK,wEAVT2C,KAkCA,SAAMC,IAGNjB,EAfE,SAAOkB,EAAAC,GACR,OAAA,IAAA9B,UAAAC,OADQ,wEAKV8B,0DAAAF,EAAA,IAAAC,EAAA,iBAWAE,CALmB5C,SAASI,cAAc,2BAA2ByB,MAGxDe,SAAYC,cAAWL,yBAAnCX,QAoCA1B,SAAKF,IAA4BM,EAAAN,iBAAK6C,QAALC,GAAA5C,EAAjCF,iBAAA,UAAA,SAAA+C,GAAA,OA3BE,SAAOC,GACR,GAAA,cAAAA,EADC,MAAO,oFAKR,KAAAA,EAAAC,SACFH,IAqBCD,CAAAE,KAOAG,IA7HFjD,EAAA,0DAGA,WAASkD,OACPC,OAAMnD,MAAMA,GAAAP,KAAA,SAAA2D,GAKJA,GAHRA,EAAA5B,OAAA/B,KAAA,SAAAgC,GAGQ2B,EAFgBC,OAAAC,KAAA7B,EAAA8B,SAAAC,YAWtBlC,MAAAtB,EAAA,CACDyD,MAAA,YAEDhE,KAAA,SAAA8B,GAAA,OAAAA,EAAAC,SACAF,KAAMtB,SAAAA,GAGEe,EAFCsC,OAAAC,KAAA7B,EAAA8B,SAAAC,UAILpB,MAAMpB,SAAAA,GAAAA,OAKNtB,QAAQgE,MAAR,2EAHArB","file":"app.min.js","sourcesContent":["import idb from 'idb';\n\n/**\n * Register Service Worker\n */\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('sw.js').then(() => {\n    console.log('Service Worker Registered');\n  });\n}\n\n(function() {\n  // check for support\n  if (!('indexedDB' in window)) {\n    console.log(\"This browser doesn't support IndexedDB\");\n    return;\n  }\n\n  const dbPromise = idb.open('test-db1', 1);\n})();\n\n/**\n * Add all the logic of the website in the DOMContentLoaded Event Listener\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const body = document.querySelector('body');\n  const currencyConvertFrom = document.querySelector('.currency__convert-from');\n  const currencyConvertTo = document.querySelector('.currency__convert-to');\n  const button = document.querySelector('.convert');\n  const originalCurrencyInputField = document.querySelector(\n    'input#original_amount',\n  );\n  const convertedCurrencyInputField = document.querySelector(\n    'input#converted_amount',\n  );\n\n  /**\n   * Create HTML Element and set inline value of the currency\n   */\n  function createNode(nodeType, currency) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the node to be created correctly.';\n    }\n\n    const node = document.createElement(nodeType);\n    node.innerText = currency;\n\n    return node;\n  }\n\n  /**\n   * Add each currency to both select HTML Elements on the DOM\n   */\n  function addCurrenciesToDOM(currencies) {\n    if (currencies.length === 0 || currencies === 'undefined') {\n      return 'Currencies array cannot be empty or undefined.';\n    }\n\n    const nodeTypeToCreate = 'option';\n\n    currencies.map(currency => {\n      currencyConvertFrom.appendChild(createNode(nodeTypeToCreate, currency));\n      currencyConvertTo.appendChild(createNode(nodeTypeToCreate, currency));\n    });\n  }\n\n  /**\n   * Get amount in the input field\n   */\n  function getInputAmount() {\n    const inputAmount = document.querySelector('input#amount').value;\n    return inputAmount;\n  }\n\n  /**\n   * Get a list of all the currencies using the API\n   */\n  function fetchListOfCurrencies() {\n    const url = 'https://free.currencyconverterapi.com/api/v5/currencies';\n\n    // Before we fetch from the API itself, check if we don't have a cached version locally\n    if ('caches' in window) {\n      caches.match(url).then(response => {\n        if (response) {\n          response.json().then(data => {\n            const currencies = Object.keys(data.results).sort();\n\n            addCurrenciesToDOM(currencies);\n          });\n        }\n      });\n\n      return;\n    }\n\n    // This will fetch the data from the API if we don't have a cached version\n    fetch(url, {\n      cache: 'default',\n    })\n      .then(res => res.json())\n      .then(data => {\n        const currencies = Object.keys(data.results).sort();\n\n        addCurrenciesToDOM(currencies);\n      })\n      .catch(err =>\n        console.error(\n          `The following error occured while trying to get the list of currencies. ${err}`,\n        ),\n      );\n  }\n\n  /**\n   * Fetch the exchange rate between two currencies\n   */\n  function fetchCurrencyRate(url) {\n    if (url === 'undefined') {\n      return 'URL Parameter cannot be undefined.';\n    }\n\n    fetch(url, {\n      cache: 'default',\n    })\n      .then(res => res.json())\n      .then(data => {\n        const inputAmount = getInputAmount();\n        const exchangeRate = Object.values(data);\n\n        calculateExchangeRate(...exchangeRate, inputAmount);\n      })\n      .catch(err =>\n        console.error(\n          `The following error occured while trying to get the conversion rate. ${err}`,\n        ),\n      );\n  }\n\n  /**\n   * Build the API URL to use to get the conversion rate for a specific set of currencies\n   */\n  function buildAPIUrl(curr1, curr2) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the URL to be built correctly.';\n    }\n\n    const currencyUrl = `https://free.currencyconverterapi.com/api/v5/convert?q=${curr1}_${curr2}&compact=ultra`;\n    return currencyUrl;\n  }\n\n  /**\n   * Get the two currencies selected in the DOM and get the exchange rate\n   */\n  function getExchangeRate() {\n    const currency1 = document.querySelector('.currency__convert-from').value;\n    const currency2 = document.querySelector('.currency__convert-to').value;\n\n    const url = buildAPIUrl(currency1, currency2);\n    fetchCurrencyRate(url);\n  }\n\n  /**\n   * Detect if the enter button has been pressed and get the exchange rate\n   */\n  function detectEnterPressed(event) {\n    if (event === 'undefined') {\n      return \"Most likely the DOM key event listener wasn't started. 'Enter' key will not fire.\";\n    }\n\n    if (event.keyCode === 13) {\n      getExchangeRate();\n    }\n  }\n\n  /**\n   * Calculate the exchange rate based on the amount entered and the currencies selected\n   */\n  function calculateExchangeRate(exchangeRate, input) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the exchange rate to be calculated correctly.';\n    }\n\n    const convertedCurrency = input * exchangeRate;\n\n    originalCurrencyInputField.value = input;\n    convertedCurrencyInputField.value = convertedCurrency.toFixed(2);\n  }\n\n  /**\n   * Add event listeners that is needed\n   */\n  function addEventListeners() {\n    button.addEventListener('click', getExchangeRate);\n    body.addEventListener('keydown', e => detectEnterPressed(e));\n  }\n\n  /**\n   * Add Event Listeners and get the currencies to display on the DOM\n   */\n  function init() {\n    addEventListeners();\n    fetchListOfCurrencies();\n  }\n\n  init();\n});\n"]}