{"version":3,"sources":["app.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","navigator","serviceWorker","register","then","console","log","url","querySelector","currencyConvertFrom","document","currencyConvertTo","button","originalCurrencyInputField","convertedCurrencyInputField","createNode","nodeType","currency","arguments","node","innerText","addCurrenciesToDOM","currencies","nodeTypeToCreate","createElement","map","appendChild","fetchCurrencyRate","Object","fetch","cache","res","json","data","inputAmount","value","exchangeRate","values","input","getExchangeRate","convertedCurrency","calculateExchangeRate","toFixed","concat","catch","err","curr1","curr2","error","currencyUrl","buildAPIUrl","addEventListeners","event","keyCode","detectEnterPressed","window","caches","match","response","keys","results","sort"],"mappings":"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","file":"app.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n * Register Service Worker\n */\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('sw.js').then(() => {\n    console.log('Service Worker Registered');\n  });\n}\n\n// (function() {\n//   // check for support\n//   if (!('indexedDB' in window)) {\n//     console.log(\"This browser doesn't support IndexedDB\");\n//     return;\n//   }\n\n//   const dbPromise = idb.open('test-db1', 1);\n// })();\n\n/**\n * Add all the logic of the website in the DOMContentLoaded Event Listener\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const body = document.querySelector('body');\n  const currencyConvertFrom = document.querySelector('.currency__convert-from');\n  const currencyConvertTo = document.querySelector('.currency__convert-to');\n  const button = document.querySelector('.convert');\n  const originalCurrencyInputField = document.querySelector(\n    'input#original_amount',\n  );\n  const convertedCurrencyInputField = document.querySelector(\n    'input#converted_amount',\n  );\n\n  /**\n   * Create HTML Element and set inline value of the currency\n   */\n  function createNode(nodeType, currency) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the node to be created correctly.';\n    }\n\n    const node = document.createElement(nodeType);\n    node.innerText = currency;\n\n    return node;\n  }\n\n  /**\n   * Add each currency to both select HTML Elements on the DOM\n   */\n  function addCurrenciesToDOM(currencies) {\n    if (currencies.length === 0 || currencies === 'undefined') {\n      return 'Currencies array cannot be empty or undefined.';\n    }\n\n    const nodeTypeToCreate = 'option';\n\n    currencies.map(currency => {\n      currencyConvertFrom.appendChild(createNode(nodeTypeToCreate, currency));\n      currencyConvertTo.appendChild(createNode(nodeTypeToCreate, currency));\n    });\n  }\n\n  /**\n   * Get amount in the input field\n   */\n  function getInputAmount() {\n    const inputAmount = document.querySelector('input#amount').value;\n    return inputAmount;\n  }\n\n  /**\n   * Get a list of all the currencies using the API\n   */\n  function fetchListOfCurrencies() {\n    const url = 'https://free.currencyconverterapi.com/api/v5/currencies';\n\n    // Before we fetch from the API itself, check if we don't have a cached version locally\n    if ('caches' in window) {\n      caches.match(url).then(response => {\n        if (response) {\n          response.json().then(data => {\n            const currencies = Object.keys(data.results).sort();\n\n            addCurrenciesToDOM(currencies);\n          });\n        }\n      });\n    }\n\n    // This will fetch the data from the API if we don't have a cached version\n    fetch(url, {\n      cache: 'default',\n    })\n      .then(res => res.json())\n      .then(data => {\n        const currencies = Object.keys(data.results).sort();\n\n        addCurrenciesToDOM(currencies);\n      })\n      .catch(err =>\n        console.error(\n          `The following error occured while trying to get the list of currencies. ${err}`,\n        ),\n      );\n  }\n\n  /**\n   * Fetch the exchange rate between two currencies\n   */\n  function fetchCurrencyRate(url) {\n    if (url === 'undefined') {\n      return 'URL Parameter cannot be undefined.';\n    }\n\n    fetch(url, {\n      cache: 'default',\n    })\n      .then(res => res.json())\n      .then(data => {\n        const inputAmount = getInputAmount();\n        const exchangeRate = Object.values(data);\n\n        calculateExchangeRate(...exchangeRate, inputAmount);\n      })\n      .catch(err =>\n        console.error(\n          `The following error occured while trying to get the conversion rate. ${err}`,\n        ),\n      );\n  }\n\n  /**\n   * Build the API URL to use to get the conversion rate for a specific set of currencies\n   */\n  function buildAPIUrl(curr1, curr2) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the URL to be built correctly.';\n    }\n\n    const currencyUrl = `https://free.currencyconverterapi.com/api/v5/convert?q=${curr1}_${curr2}&compact=ultra`;\n    return currencyUrl;\n  }\n\n  /**\n   * Get the two currencies selected in the DOM and get the exchange rate\n   */\n  function getExchangeRate() {\n    const currency1 = document.querySelector('.currency__convert-from').value;\n    const currency2 = document.querySelector('.currency__convert-to').value;\n\n    const url = buildAPIUrl(currency1, currency2);\n    fetchCurrencyRate(url);\n  }\n\n  /**\n   * Detect if the enter button has been pressed and get the exchange rate\n   */\n  function detectEnterPressed(event) {\n    if (event === 'undefined') {\n      return \"Most likely the DOM key event listener wasn't started. 'Enter' key will not fire.\";\n    }\n\n    if (event.keyCode === 13) {\n      getExchangeRate();\n    }\n  }\n\n  /**\n   * Calculate the exchange rate based on the amount entered and the currencies selected\n   */\n  function calculateExchangeRate(exchangeRate, input) {\n    if (arguments.length !== 2) {\n      return 'You need to specify both arguments for the exchange rate to be calculated correctly.';\n    }\n\n    const convertedCurrency = input * exchangeRate;\n\n    originalCurrencyInputField.value = input;\n    convertedCurrencyInputField.value = convertedCurrency.toFixed(2);\n  }\n\n  /**\n   * Add event listeners that is needed\n   */\n  function addEventListeners() {\n    button.addEventListener('click', getExchangeRate);\n    body.addEventListener('keydown', e => detectEnterPressed(e));\n  }\n\n  /**\n   * Add Event Listeners and get the currencies to display on the DOM\n   */\n  function init() {\n    addEventListeners();\n    fetchListOfCurrencies();\n  }\n\n  init();\n});\n\n},{}]},{},[1]);\n"]}